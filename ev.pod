=head1 NAME

libev - a high performance full-featured event loop written in C

=head1 SYNOPSIS

  #include <ev.h>

=head1 DESCRIPTION

Libev is an event loop: you register interest in certain events (such as a
file descriptor being readable or a timeout occuring), and it will manage
these event sources and provide your program with events.

To do this, it must take more or less complete control over your process
(or thread) by executing the I<event loop> handler, and will then
communicate events via a callback mechanism.

You register interest in certain events by registering so-called I<event
watchers>, which are relatively small C structures you initialise with the
details of the event, and then hand it over to libev by I<starting> the
watcher.

=head1 FEATURES

Libev supports select, poll, the linux-specific epoll and the bsd-specific
kqueue mechanisms for file descriptor events, relative timers, absolute
timers with customised rescheduling, signal events, process status change
events (related to SIGCHLD), and event watchers dealing with the event
loop mechanism itself (idle, prepare and check watchers). It also is quite
fast (see this L<benchmark|http://libev.schmorp.de/bench.html> comparing
it to libevent for example).

=head1 CONVENTIONS

Libev is very configurable. In this manual the default configuration
will be described, which supports multiple event loops. For more info
about various configuration options please have a look at the file
F<README.embed> in the libev distribution. If libev was configured without
support for multiple event loops, then all functions taking an initial
argument of name C<loop> (which is always of type C<struct ev_loop *>)
will not have this argument.

=head1 TIME REPRESENTATION

Libev represents time as a single floating point number, representing the
(fractional) number of seconds since the (POSIX) epoch (somewhere near
the beginning of 1970, details are complicated, don't ask). This type is
called C<ev_tstamp>, which is what you should use too. It usually aliases
to the C<double> type in C, and when you need to do any calculations on
it, you should treat it as such.


=head1 GLOBAL FUNCTIONS

These functions can be called anytime, even before initialising the
library in any way.

=over 4

=item ev_tstamp ev_time ()

Returns the current time as libev would use it. Please note that the
C<ev_now> function is usually faster and also often returns the timestamp
you actually want to know.

=item int ev_version_major ()

=item int ev_version_minor ()

You can find out the major and minor version numbers of the library
you linked against by calling the functions C<ev_version_major> and
C<ev_version_minor>. If you want, you can compare against the global
symbols C<EV_VERSION_MAJOR> and C<EV_VERSION_MINOR>, which specify the
version of the library your program was compiled against.

Usually, it's a good idea to terminate if the major versions mismatch,
as this indicates an incompatible change.  Minor versions are usually
compatible to older versions, so a larger minor version alone is usually
not a problem.

Example: make sure we haven't accidentally been linked against the wrong
version:

  assert (("libev version mismatch",
           ev_version_major () == EV_VERSION_MAJOR
           && ev_version_minor () >= EV_VERSION_MINOR));

=item unsigned int ev_supported_backends ()

Return the set of all backends (i.e. their corresponding C<EV_BACKEND_*>
value) compiled into this binary of libev (independent of their
availability on the system you are running on). See C<ev_default_loop> for
a description of the set values.

Example: make sure we have the epoll method, because yeah this is cool and
a must have and can we have a torrent of it please!!!11

  assert (("sorry, no epoll, no sex",
           ev_supported_backends () & EVBACKEND_EPOLL));

=item unsigned int ev_recommended_backends ()

Return the set of all backends compiled into this binary of libev and also
recommended for this platform. This set is often smaller than the one
returned by C<ev_supported_backends>, as for example kqueue is broken on
most BSDs and will not be autodetected unless you explicitly request it
(assuming you know what you are doing). This is the set of backends that
libev will probe for if you specify no backends explicitly.

=item unsigned int ev_embeddable_backends ()

Returns the set of backends that are embeddable in other event loops. This
is the theoretical, all-platform, value. To find which backends
might be supported on the current system, you would need to look at
C<ev_embeddable_backends () & ev_supported_backends ()>, likewise for
recommended ones.

See the description of C<ev_embed> watchers for more info.

=item ev_set_allocator (void *(*cb)(void *ptr, long size))

Sets the allocation function to use (the prototype is similar to the
realloc C function, the semantics are identical). It is used to allocate
and free memory (no surprises here). If it returns zero when memory
needs to be allocated, the library might abort or take some potentially
destructive action. The default is your system realloc function.

You could override this function in high-availability programs to, say,
free some memory if it cannot allocate memory, to use a special allocator,
or even to sleep a while and retry until some memory is available.

Example: replace the libev allocator with one that waits a bit and then
retries: better than mine).

   static void *
   persistent_realloc (void *ptr, long size)
   {
     for (;;)
       {
         void *newptr = realloc (ptr, size);

         if (newptr)
           return newptr;

         sleep (60);
       }
   }

   ...
   ev_set_allocator (persistent_realloc);

=item ev_set_syserr_cb (void (*cb)(const char *msg));

Set the callback function to call on a retryable syscall error (such
as failed select, poll, epoll_wait). The message is a printable string
indicating the system call or subsystem causing the problem. If this
callback is set, then libev will expect it to remedy the sitution, no
matter what, when it returns. That is, libev will generally retry the
requested operation, or, if the condition doesn't go away, do bad stuff
(such as abort).

Example: do the same thing as libev does internally:

   static void
   fatal_error (const char *msg)
   {
     perror (msg);
     abort ();
   }

   ...
   ev_set_syserr_cb (fatal_error);

=back

=head1 FUNCTIONS CONTROLLING THE EVENT LOOP

An event loop is described by a C<struct ev_loop *>. The library knows two
types of such loops, the I<default> loop, which supports signals and child
events, and dynamically created loops which do not.

If you use threads, a common model is to run the default event loop
in your main thread (or in a separate thread) and for each thread you
create, you also create another event loop. Libev itself does no locking
whatsoever, so if you mix calls to the same event loop in different
threads, make sure you lock (this is usually a bad idea, though, even if
done correctly, because it's hideous and inefficient).

=over 4

=item struct ev_loop *ev_default_loop (unsigned int flags)

This will initialise the default event loop if it hasn't been initialised
yet and return it. If the default loop could not be initialised, returns
false. If it already was initialised it simply returns it (and ignores the
flags. If that is troubling you, check C<ev_backend ()> afterwards).

If you don't know what event loop to use, use the one returned from this
function.

The flags argument can be used to specify special behaviour or specific
backends to use, and is usually specified as C<0> (or C<EVFLAG_AUTO>).

The following flags are supported:

=over 4

=item C<EVFLAG_AUTO>

The default flags value. Use this if you have no clue (it's the right
thing, believe me).

=item C<EVFLAG_NOENV>

If this flag bit is ored into the flag value (or the program runs setuid
or setgid) then libev will I<not> look at the environment variable
C<LIBEV_FLAGS>. Otherwise (the default), this environment variable will
override the flags completely if it is found in the environment. This is
useful to try out specific backends to test their performance, or to work
around bugs.

=item C<EVBACKEND_SELECT>  (value 1, portable select backend)

This is your standard select(2) backend. Not I<completely> standard, as
libev tries to roll its own fd_set with no limits on the number of fds,
but if that fails, expect a fairly low limit on the number of fds when
using this backend. It doesn't scale too well (O(highest_fd)), but its usually
the fastest backend for a low number of fds.

=item C<EVBACKEND_POLL>    (value 2, poll backend, available everywhere except on windows)

And this is your standard poll(2) backend. It's more complicated than
select, but handles sparse fds better and has no artificial limit on the
number of fds you can use (except it will slow down considerably with a
lot of inactive fds). It scales similarly to select, i.e. O(total_fds).

=item C<EVBACKEND_EPOLL>   (value 4, Linux)

For few fds, this backend is a bit little slower than poll and select,
but it scales phenomenally better. While poll and select usually scale like
O(total_fds) where n is the total number of fds (or the highest fd), epoll scales
either O(1) or O(active_fds).

While stopping and starting an I/O watcher in the same iteration will
result in some caching, there is still a syscall per such incident
(because the fd could point to a different file description now), so its
best to avoid that. Also, dup()ed file descriptors might not work very
well if you register events for both fds.

Please note that epoll sometimes generates spurious notifications, so you
need to use non-blocking I/O or other means to avoid blocking when no data
(or space) is available.

=item C<EVBACKEND_KQUEUE>  (value 8, most BSD clones)

Kqueue deserves special mention, as at the time of this writing, it
was broken on all BSDs except NetBSD (usually it doesn't work with
anything but sockets and pipes, except on Darwin, where of course its
completely useless). For this reason its not being "autodetected"
unless you explicitly specify it explicitly in the flags (i.e. using
C<EVBACKEND_KQUEUE>).

It scales in the same way as the epoll backend, but the interface to the
kernel is more efficient (which says nothing about its actual speed, of
course). While starting and stopping an I/O watcher does not cause an
extra syscall as with epoll, it still adds up to four event changes per
incident, so its best to avoid that.

=item C<EVBACKEND_DEVPOLL> (value 16, Solaris 8)

This is not implemented yet (and might never be).

=item C<EVBACKEND_PORT>    (value 32, Solaris 10)

This uses the Solaris 10 port mechanism. As with everything on Solaris,
it's really slow, but it still scales very well (O(active_fds)).

Please note that solaris ports can result in a lot of spurious
notifications, so you need to use non-blocking I/O or other means to avoid
blocking when no data (or space) is available.

=item C<EVBACKEND_ALL>

Try all backends (even potentially broken ones that wouldn't be tried
with C<EVFLAG_AUTO>). Since this is a mask, you can do stuff such as
C<EVBACKEND_ALL & ~EVBACKEND_KQUEUE>.

=back

If one or more of these are ored into the flags value, then only these
backends will be tried (in the reverse order as given here). If none are
specified, most compiled-in backend will be tried, usually in reverse
order of their flag values :)

The most typical usage is like this:

  if (!ev_default_loop (0))
    fatal ("could not initialise libev, bad $LIBEV_FLAGS in environment?");

Restrict libev to the select and poll backends, and do not allow
environment settings to be taken into account:

  ev_default_loop (EVBACKEND_POLL | EVBACKEND_SELECT | EVFLAG_NOENV);

Use whatever libev has to offer, but make sure that kqueue is used if
available (warning, breaks stuff, best use only with your own private
event loop and only if you know the OS supports your types of fds):

  ev_default_loop (ev_recommended_backends () | EVBACKEND_KQUEUE);

=item struct ev_loop *ev_loop_new (unsigned int flags)

Similar to C<ev_default_loop>, but always creates a new event loop that is
always distinct from the default loop. Unlike the default loop, it cannot
handle signal and child watchers, and attempts to do so will be greeted by
undefined behaviour (or a failed assertion if assertions are enabled).

Example: try to create a event loop that uses epoll and nothing else.

  struct ev_loop *epoller = ev_loop_new (EVBACKEND_EPOLL | EVFLAG_NOENV);
  if (!epoller)
    fatal ("no epoll found here, maybe it hides under your chair");

=item ev_default_destroy ()

Destroys the default loop again (frees all memory and kernel state
etc.). None of the active event watchers will be stopped in the normal
sense, so e.g. C<ev_is_active> might still return true. It is your
responsibility to either stop all watchers cleanly yoursef I<before>
calling this function, or cope with the fact afterwards (which is usually
the easiest thing, youc na just ignore the watchers and/or C<free ()> them
for example).

=item ev_loop_destroy (loop)

Like C<ev_default_destroy>, but destroys an event loop created by an
earlier call to C<ev_loop_new>.

=item ev_default_fork ()

This function reinitialises the kernel state for backends that have
one. Despite the name, you can call it anytime, but it makes most sense
after forking, in either the parent or child process (or both, but that
again makes little sense).

You I<must> call this function in the child process after forking if and
only if you want to use the event library in both processes. If you just
fork+exec, you don't have to call it.

The function itself is quite fast and it's usually not a problem to call
it just in case after a fork. To make this easy, the function will fit in
quite nicely into a call to C<pthread_atfork>:

    pthread_atfork (0, 0, ev_default_fork);

At the moment, C<EVBACKEND_SELECT> and C<EVBACKEND_POLL> are safe to use
without calling this function, so if you force one of those backends you
do not need to care.

=item ev_loop_fork (loop)

Like C<ev_default_fork>, but acts on an event loop created by
C<ev_loop_new>. Yes, you have to call this on every allocated event loop
after fork, and how you do this is entirely your own problem.

=item unsigned int ev_backend (loop)

Returns one of the C<EVBACKEND_*> flags indicating the event backend in
use.

=item ev_tstamp ev_now (loop)

Returns the current "event loop time", which is the time the event loop
received events and started processing them. This timestamp does not
change as long as callbacks are being processed, and this is also the base
time used for relative timers. You can treat it as the timestamp of the
event occuring (or more correctly, libev finding out about it).

=item ev_loop (loop, int flags)

Finally, this is it, the event handler. This function usually is called
after you initialised all your watchers and you want to start handling
events.

If the flags argument is specified as C<0>, it will not return until
either no event watchers are active anymore or C<ev_unloop> was called.

Please note that an explicit C<ev_unloop> is usually better than
relying on all watchers to be stopped when deciding when a program has
finished (especially in interactive programs), but having a program that
automatically loops as long as it has to and no longer by virtue of
relying on its watchers stopping correctly is a thing of beauty.

A flags value of C<EVLOOP_NONBLOCK> will look for new events, will handle
those events and any outstanding ones, but will not block your process in
case there are no events and will return after one iteration of the loop.

A flags value of C<EVLOOP_ONESHOT> will look for new events (waiting if
neccessary) and will handle those and any outstanding ones. It will block
your process until at least one new event arrives, and will return after
one iteration of the loop. This is useful if you are waiting for some
external event in conjunction with something not expressible using other
libev watchers. However, a pair of C<ev_prepare>/C<ev_check> watchers is
usually a better approach for this kind of thing.

Here are the gory details of what C<ev_loop> does:

   * If there are no active watchers (reference count is zero), return.
   - Queue prepare watchers and then call all outstanding watchers.
   - If we have been forked, recreate the kernel state.
   - Update the kernel state with all outstanding changes.
   - Update the "event loop time".
   - Calculate for how long to block.
   - Block the process, waiting for any events.
   - Queue all outstanding I/O (fd) events.
   - Update the "event loop time" and do time jump handling.
   - Queue all outstanding timers.
   - Queue all outstanding periodics.
   - If no events are pending now, queue all idle watchers.
   - Queue all check watchers.
   - Call all queued watchers in reverse order (i.e. check watchers first).
     Signals and child watchers are implemented as I/O watchers, and will
     be handled here by queueing them when their watcher gets executed.
   - If ev_unloop has been called or EVLOOP_ONESHOT or EVLOOP_NONBLOCK
     were used, return, otherwise continue with step *.

Example: queue some jobs and then loop until no events are outsanding
anymore.

   ... queue jobs here, make sure they register event watchers as long
   ... as they still have work to do (even an idle watcher will do..)
   ev_loop (my_loop, 0);
   ... jobs done. yeah!

=item ev_unloop (loop, how)

Can be used to make a call to C<ev_loop> return early (but only after it
has processed all outstanding events). The C<how> argument must be either
C<EVUNLOOP_ONE>, which will make the innermost C<ev_loop> call return, or
C<EVUNLOOP_ALL>, which will make all nested C<ev_loop> calls return.

=item ev_ref (loop)

=item ev_unref (loop)

Ref/unref can be used to add or remove a reference count on the event
loop: Every watcher keeps one reference, and as long as the reference
count is nonzero, C<ev_loop> will not return on its own. If you have
a watcher you never unregister that should not keep C<ev_loop> from
returning, ev_unref() after starting, and ev_ref() before stopping it. For
example, libev itself uses this for its internal signal pipe: It is not
visible to the libev user and should not keep C<ev_loop> from exiting if
no event watchers registered by it are active. It is also an excellent
way to do this for generic recurring timers or from within third-party
libraries. Just remember to I<unref after start> and I<ref before stop>.

Example: create a signal watcher, but keep it from keeping C<ev_loop>
running when nothing else is active.

  struct dv_signal exitsig;
  ev_signal_init (&exitsig, sig_cb, SIGINT);
  ev_signal_start (myloop, &exitsig);
  evf_unref (myloop);

Example: for some weird reason, unregister the above signal handler again.

  ev_ref (myloop);
  ev_signal_stop (myloop, &exitsig);

=back

=head1 ANATOMY OF A WATCHER

A watcher is a structure that you create and register to record your
interest in some event. For instance, if you want to wait for STDIN to
become readable, you would create an C<ev_io> watcher for that:

  static void my_cb (struct ev_loop *loop, struct ev_io *w, int revents)
  {
    ev_io_stop (w);
    ev_unloop (loop, EVUNLOOP_ALL);
  }

  struct ev_loop *loop = ev_default_loop (0);
  struct ev_io stdin_watcher;
  ev_init (&stdin_watcher, my_cb);
  ev_io_set (&stdin_watcher, STDIN_FILENO, EV_READ);
  ev_io_start (loop, &stdin_watcher);
  ev_loop (loop, 0);

As you can see, you are responsible for allocating the memory for your
watcher structures (and it is usually a bad idea to do this on the stack,
although this can sometimes be quite valid).

Each watcher structure must be initialised by a call to C<ev_init
(watcher *, callback)>, which expects a callback to be provided. This
callback gets invoked each time the event occurs (or, in the case of io
watchers, each time the event loop detects that the file descriptor given
is readable and/or writable).

Each watcher type has its own C<< ev_<type>_set (watcher *, ...) >> macro
with arguments specific to this watcher type. There is also a macro
to combine initialisation and setting in one call: C<< ev_<type>_init
(watcher *, callback, ...) >>.

To make the watcher actually watch out for events, you have to start it
with a watcher-specific start function (C<< ev_<type>_start (loop, watcher
*) >>), and you can stop watching for events at any time by calling the
corresponding stop function (C<< ev_<type>_stop (loop, watcher *) >>.

As long as your watcher is active (has been started but not stopped) you
must not touch the values stored in it. Most specifically you must never
reinitialise it or call its C<set> macro.

Each and every callback receives the event loop pointer as first, the
registered watcher structure as second, and a bitset of received events as
third argument.

The received events usually include a single bit per event type received
(you can receive multiple events at the same time). The possible bit masks
are:

=over 4

=item C<EV_READ>

=item C<EV_WRITE>

The file descriptor in the C<ev_io> watcher has become readable and/or
writable.

=item C<EV_TIMEOUT>

The C<ev_timer> watcher has timed out.

=item C<EV_PERIODIC>

The C<ev_periodic> watcher has timed out.

=item C<EV_SIGNAL>

The signal specified in the C<ev_signal> watcher has been received by a thread.

=item C<EV_CHILD>

The pid specified in the C<ev_child> watcher has received a status change.

=item C<EV_IDLE>

The C<ev_idle> watcher has determined that you have nothing better to do.

=item C<EV_PREPARE>

=item C<EV_CHECK>

All C<ev_prepare> watchers are invoked just I<before> C<ev_loop> starts
to gather new events, and all C<ev_check> watchers are invoked just after
C<ev_loop> has gathered them, but before it invokes any callbacks for any
received events. Callbacks of both watcher types can start and stop as
many watchers as they want, and all of them will be taken into account
(for example, a C<ev_prepare> watcher might start an idle watcher to keep
C<ev_loop> from blocking).

=item C<EV_ERROR>

An unspecified error has occured, the watcher has been stopped. This might
happen because the watcher could not be properly started because libev
ran out of memory, a file descriptor was found to be closed or any other
problem. You best act on it by reporting the problem and somehow coping
with the watcher being stopped.

Libev will usually signal a few "dummy" events together with an error,
for example it might indicate that a fd is readable or writable, and if
your callbacks is well-written it can just attempt the operation and cope
with the error from read() or write(). This will not work in multithreaded
programs, though, so beware.

=back

=head2 SUMMARY OF GENERIC WATCHER FUNCTIONS

In the following description, C<TYPE> stands for the watcher type,
e.g. C<timer> for C<ev_timer> watchers and C<io> for C<ev_io> watchers.

=over 4

=item C<ev_init> (ev_TYPE *watcher, callback)

This macro initialises the generic portion of a watcher. The contents
of the watcher object can be arbitrary (so C<malloc> will do). Only
the generic parts of the watcher are initialised, you I<need> to call
the type-specific C<ev_TYPE_set> macro afterwards to initialise the
type-specific parts. For each type there is also a C<ev_TYPE_init> macro
which rolls both calls into one.

You can reinitialise a watcher at any time as long as it has been stopped
(or never started) and there are no pending events outstanding.

The callbakc is always of type C<void (*)(ev_loop *loop, ev_TYPE *watcher,
int revents)>.

=item C<ev_TYPE_set> (ev_TYPE *, [args])

This macro initialises the type-specific parts of a watcher. You need to
call C<ev_init> at least once before you call this macro, but you can
call C<ev_TYPE_set> any number of times. You must not, however, call this
macro on a watcher that is active (it can be pending, however, which is a
difference to the C<ev_init> macro).

Although some watcher types do not have type-specific arguments
(e.g. C<ev_prepare>) you still need to call its C<set> macro.

=item C<ev_TYPE_init> (ev_TYPE *watcher, callback, [args])

This convinience macro rolls both C<ev_init> and C<ev_TYPE_set> macro
calls into a single call. This is the most convinient method to initialise
a watcher. The same limitations apply, of course.

=item C<ev_TYPE_start> (loop *, ev_TYPE *watcher)

Starts (activates) the given watcher. Only active watchers will receive
events. If the watcher is already active nothing will happen.

=item C<ev_TYPE_stop> (loop *, ev_TYPE *watcher)

Stops the given watcher again (if active) and clears the pending
status. It is possible that stopped watchers are pending (for example,
non-repeating timers are being stopped when they become pending), but
C<ev_TYPE_stop> ensures that the watcher is neither active nor pending. If
you want to free or reuse the memory used by the watcher it is therefore a
good idea to always call its C<ev_TYPE_stop> function.

=item bool ev_is_active (ev_TYPE *watcher)

Returns a true value iff the watcher is active (i.e. it has been started
and not yet been stopped). As long as a watcher is active you must not modify
it.

=item bool ev_is_pending (ev_TYPE *watcher)

Returns a true value iff the watcher is pending, (i.e. it has outstanding
events but its callback has not yet been invoked). As long as a watcher
is pending (but not active) you must not call an init function on it (but
C<ev_TYPE_set> is safe) and you must make sure the watcher is available to
libev (e.g. you cnanot C<free ()> it).

=item callback = ev_cb (ev_TYPE *watcher)

Returns the callback currently set on the watcher.

=item ev_cb_set (ev_TYPE *watcher, callback)

Change the callback. You can change the callback at virtually any time
(modulo threads).

=back


=head2 ASSOCIATING CUSTOM DATA WITH A WATCHER

Each watcher has, by default, a member C<void *data> that you can change
and read at any time, libev will completely ignore it. This can be used
to associate arbitrary data with your watcher. If you need more data and
don't want to allocate memory and store a pointer to it in that data
member, you can also "subclass" the watcher type and provide your own
data:

  struct my_io
  {
    struct ev_io io;
    int otherfd;
    void *somedata;
    struct whatever *mostinteresting;
  }

And since your callback will be called with a pointer to the watcher, you
can cast it back to your own type:

  static void my_cb (struct ev_loop *loop, struct ev_io *w_, int revents)
  {
    struct my_io *w = (struct my_io *)w_;
    ...
  }

More interesting and less C-conformant ways of catsing your callback type
have been omitted....


=head1 WATCHER TYPES

This section describes each watcher in detail, but will not repeat
information given in the last section.


=head2 C<ev_io> - is this file descriptor readable or writable

I/O watchers check whether a file descriptor is readable or writable
in each iteration of the event loop (This behaviour is called
level-triggering because you keep receiving events as long as the
condition persists. Remember you can stop the watcher if you don't want to
act on the event and neither want to receive future events).

In general you can register as many read and/or write event watchers per
fd as you want (as long as you don't confuse yourself). Setting all file
descriptors to non-blocking mode is also usually a good idea (but not
required if you know what you are doing).

You have to be careful with dup'ed file descriptors, though. Some backends
(the linux epoll backend is a notable example) cannot handle dup'ed file
descriptors correctly if you register interest in two or more fds pointing
to the same underlying file/socket etc. description (that is, they share
the same underlying "file open").

If you must do this, then force the use of a known-to-be-good backend
(at the time of this writing, this includes only C<EVBACKEND_SELECT> and
C<EVBACKEND_POLL>).

=over 4

=item ev_io_init (ev_io *, callback, int fd, int events)

=item ev_io_set (ev_io *, int fd, int events)

Configures an C<ev_io> watcher. The fd is the file descriptor to rceeive
events for and events is either C<EV_READ>, C<EV_WRITE> or C<EV_READ |
EV_WRITE> to receive the given events.

Please note that most of the more scalable backend mechanisms (for example
epoll and solaris ports) can result in spurious readyness notifications
for file descriptors, so you practically need to use non-blocking I/O (and
treat callback invocation as hint only), or retest separately with a safe
interface before doing I/O (XLib can do this), or force the use of either
C<EVBACKEND_SELECT> or C<EVBACKEND_POLL>, which don't suffer from this
problem. Also note that it is quite easy to have your callback invoked
when the readyness condition is no longer valid even when employing
typical ways of handling events, so its a good idea to use non-blocking
I/O unconditionally.

=back

Example: call C<stdin_readable_cb> when STDIN_FILENO has become, well
readable, but only once. Since it is likely line-buffered, you could
attempt to read a whole line in the callback:

  static void
  stdin_readable_cb (struct ev_loop *loop, struct ev_io *w, int revents)
  {
     ev_io_stop (loop, w);
    .. read from stdin here (or from w->fd) and haqndle any I/O errors
  }

  ...
  struct ev_loop *loop = ev_default_init (0);
  struct ev_io stdin_readable;
  ev_io_init (&stdin_readable, stdin_readable_cb, STDIN_FILENO, EV_READ);
  ev_io_start (loop, &stdin_readable);
  ev_loop (loop, 0);


=head2 C<ev_timer> - relative and optionally recurring timeouts

Timer watchers are simple relative timers that generate an event after a
given time, and optionally repeating in regular intervals after that.

The timers are based on real time, that is, if you register an event that
times out after an hour and you reset your system clock to last years
time, it will still time out after (roughly) and hour. "Roughly" because
detecting time jumps is hard, and some inaccuracies are unavoidable (the
monotonic clock option helps a lot here).

The relative timeouts are calculated relative to the C<ev_now ()>
time. This is usually the right thing as this timestamp refers to the time
of the event triggering whatever timeout you are modifying/starting. If
you suspect event processing to be delayed and you I<need> to base the timeout
on the current time, use something like this to adjust for this:

   ev_timer_set (&timer, after + ev_now () - ev_time (), 0.);

The callback is guarenteed to be invoked only when its timeout has passed,
but if multiple timers become ready during the same loop iteration then
order of execution is undefined.

=over 4

=item ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat)

=item ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat)

Configure the timer to trigger after C<after> seconds. If C<repeat> is
C<0.>, then it will automatically be stopped. If it is positive, then the
timer will automatically be configured to trigger again C<repeat> seconds
later, again, and again, until stopped manually.

The timer itself will do a best-effort at avoiding drift, that is, if you
configure a timer to trigger every 10 seconds, then it will trigger at
exactly 10 second intervals. If, however, your program cannot keep up with
the timer (because it takes longer than those 10 seconds to do stuff) the
timer will not fire more than once per event loop iteration.

=item ev_timer_again (loop)

This will act as if the timer timed out and restart it again if it is
repeating. The exact semantics are:

If the timer is started but nonrepeating, stop it.

If the timer is repeating, either start it if necessary (with the repeat
value), or reset the running timer to the repeat value.

This sounds a bit complicated, but here is a useful and typical
example: Imagine you have a tcp connection and you want a so-called idle
timeout, that is, you want to be called when there have been, say, 60
seconds of inactivity on the socket. The easiest way to do this is to
configure an C<ev_timer> with after=repeat=60 and calling ev_timer_again each
time you successfully read or write some data. If you go into an idle
state where you do not expect data to travel on the socket, you can stop
the timer, and again will automatically restart it if need be.

=back

Example: create a timer that fires after 60 seconds.

  static void
  one_minute_cb (struct ev_loop *loop, struct ev_timer *w, int revents)
  {
    .. one minute over, w is actually stopped right here
  }

  struct ev_timer mytimer;
  ev_timer_init (&mytimer, one_minute_cb, 60., 0.);
  ev_timer_start (loop, &mytimer);

Example: create a timeout timer that times out after 10 seconds of
inactivity.

  static void
  timeout_cb (struct ev_loop *loop, struct ev_timer *w, int revents)
  {
    .. ten seconds without any activity
  }

  struct ev_timer mytimer;
  ev_timer_init (&mytimer, timeout_cb, 0., 10.); /* note, only repeat used */
  ev_timer_again (&mytimer); /* start timer */
  ev_loop (loop, 0);

  // and in some piece of code that gets executed on any "activity":
  // reset the timeout to start ticking again at 10 seconds
  ev_timer_again (&mytimer);


=head2 C<ev_periodic> - to cron or not to cron

Periodic watchers are also timers of a kind, but they are very versatile
(and unfortunately a bit complex).

Unlike C<ev_timer>'s, they are not based on real time (or relative time)
but on wallclock time (absolute time). You can tell a periodic watcher
to trigger "at" some specific point in time. For example, if you tell a
periodic watcher to trigger in 10 seconds (by specifiying e.g. C<ev_now ()
+ 10.>) and then reset your system clock to the last year, then it will
take a year to trigger the event (unlike an C<ev_timer>, which would trigger
roughly 10 seconds later and of course not if you reset your system time
again).

They can also be used to implement vastly more complex timers, such as
triggering an event on eahc midnight, local time.

As with timers, the callback is guarenteed to be invoked only when the
time (C<at>) has been passed, but if multiple periodic timers become ready
during the same loop iteration then order of execution is undefined.

=over 4

=item ev_periodic_init (ev_periodic *, callback, ev_tstamp at, ev_tstamp interval, reschedule_cb)

=item ev_periodic_set (ev_periodic *, ev_tstamp after, ev_tstamp repeat, reschedule_cb)

Lots of arguments, lets sort it out... There are basically three modes of
operation, and we will explain them from simplest to complex:

=over 4

=item * absolute timer (interval = reschedule_cb = 0)

In this configuration the watcher triggers an event at the wallclock time
C<at> and doesn't repeat. It will not adjust when a time jump occurs,
that is, if it is to be run at January 1st 2011 then it will run when the
system time reaches or surpasses this time.

=item * non-repeating interval timer (interval > 0, reschedule_cb = 0)

In this mode the watcher will always be scheduled to time out at the next
C<at + N * interval> time (for some integer N) and then repeat, regardless
of any time jumps.

This can be used to create timers that do not drift with respect to system
time:

   ev_periodic_set (&periodic, 0., 3600., 0);

This doesn't mean there will always be 3600 seconds in between triggers,
but only that the the callback will be called when the system time shows a
full hour (UTC), or more correctly, when the system time is evenly divisible
by 3600.

Another way to think about it (for the mathematically inclined) is that
C<ev_periodic> will try to run the callback in this mode at the next possible
time where C<time = at (mod interval)>, regardless of any time jumps.

=item * manual reschedule mode (reschedule_cb = callback)

In this mode the values for C<interval> and C<at> are both being
ignored. Instead, each time the periodic watcher gets scheduled, the
reschedule callback will be called with the watcher as first, and the
current time as second argument.

NOTE: I<This callback MUST NOT stop or destroy any periodic watcher,
ever, or make any event loop modifications>. If you need to stop it,
return C<now + 1e30> (or so, fudge fudge) and stop it afterwards (e.g. by
starting a prepare watcher).

Its prototype is C<ev_tstamp (*reschedule_cb)(struct ev_periodic *w,
ev_tstamp now)>, e.g.:

   static ev_tstamp my_rescheduler (struct ev_periodic *w, ev_tstamp now)
   {
     return now + 60.;
   }

It must return the next time to trigger, based on the passed time value
(that is, the lowest time value larger than to the second argument). It
will usually be called just before the callback will be triggered, but
might be called at other times, too.

NOTE: I<< This callback must always return a time that is later than the
passed C<now> value >>. Not even C<now> itself will do, it I<must> be larger.

This can be used to create very complex timers, such as a timer that
triggers on each midnight, local time. To do this, you would calculate the
next midnight after C<now> and return the timestamp value for this. How
you do this is, again, up to you (but it is not trivial, which is the main
reason I omitted it as an example).

=back

=item ev_periodic_again (loop, ev_periodic *)

Simply stops and restarts the periodic watcher again. This is only useful
when you changed some parameters or the reschedule callback would return
a different time than the last time it was called (e.g. in a crond like
program when the crontabs have changed).

=back

Example: call a callback every hour, or, more precisely, whenever the
system clock is divisible by 3600. The callback invocation times have
potentially a lot of jittering, but good long-term stability.

  static void
  clock_cb (struct ev_loop *loop, struct ev_io *w, int revents)
  {
    ... its now a full hour (UTC, or TAI or whatever your clock follows)
  }

  struct ev_periodic hourly_tick;
  ev_periodic_init (&hourly_tick, clock_cb, 0., 3600., 0);
  ev_periodic_start (loop, &hourly_tick);

Example: the same as above, but use a reschedule callback to do it:

  #include <math.h>

  static ev_tstamp
  my_scheduler_cb (struct ev_periodic *w, ev_tstamp now)
  {
    return fmod (now, 3600.) + 3600.;
  }

  ev_periodic_init (&hourly_tick, clock_cb, 0., 0., my_scheduler_cb);

Example: call a callback every hour, starting now:

  struct ev_periodic hourly_tick;
  ev_periodic_init (&hourly_tick, clock_cb,
                    fmod (ev_now (loop), 3600.), 3600., 0);
  ev_periodic_start (loop, &hourly_tick);
  

=head2 C<ev_signal> - signal me when a signal gets signalled

Signal watchers will trigger an event when the process receives a specific
signal one or more times. Even though signals are very asynchronous, libev
will try it's best to deliver signals synchronously, i.e. as part of the
normal event processing, like any other event.

You can configure as many watchers as you like per signal. Only when the
first watcher gets started will libev actually register a signal watcher
with the kernel (thus it coexists with your own signal handlers as long
as you don't register any with libev). Similarly, when the last signal
watcher for a signal is stopped libev will reset the signal handler to
SIG_DFL (regardless of what it was set to before).

=over 4

=item ev_signal_init (ev_signal *, callback, int signum)

=item ev_signal_set (ev_signal *, int signum)

Configures the watcher to trigger on the given signal number (usually one
of the C<SIGxxx> constants).

=back


=head2 C<ev_child> - wait for pid status changes

Child watchers trigger when your process receives a SIGCHLD in response to
some child status changes (most typically when a child of yours dies).

=over 4

=item ev_child_init (ev_child *, callback, int pid)

=item ev_child_set (ev_child *, int pid)

Configures the watcher to wait for status changes of process C<pid> (or
I<any> process if C<pid> is specified as C<0>). The callback can look
at the C<rstatus> member of the C<ev_child> watcher structure to see
the status word (use the macros from C<sys/wait.h> and see your systems
C<waitpid> documentation). The C<rpid> member contains the pid of the
process causing the status change.

=back

Example: try to exit cleanly on SIGINT and SIGTERM.

  static void
  sigint_cb (struct ev_loop *loop, struct ev_signal *w, int revents)
  {
    ev_unloop (loop, EVUNLOOP_ALL);
  }

  struct ev_signal signal_watcher;
  ev_signal_init (&signal_watcher, sigint_cb, SIGINT);
  ev_signal_start (loop, &sigint_cb);


=head2 C<ev_idle> - when you've got nothing better to do

Idle watchers trigger events when there are no other events are pending
(prepare, check and other idle watchers do not count). That is, as long
as your process is busy handling sockets or timeouts (or even signals,
imagine) it will not be triggered. But when your process is idle all idle
watchers are being called again and again, once per event loop iteration -
until stopped, that is, or your process receives more events and becomes
busy.

The most noteworthy effect is that as long as any idle watchers are
active, the process will not block when waiting for new events.

Apart from keeping your process non-blocking (which is a useful
effect on its own sometimes), idle watchers are a good place to do
"pseudo-background processing", or delay processing stuff to after the
event loop has handled all outstanding events.

=over 4

=item ev_idle_init (ev_signal *, callback)

Initialises and configures the idle watcher - it has no parameters of any
kind. There is a C<ev_idle_set> macro, but using it is utterly pointless,
believe me.

=back

Example: dynamically allocate an C<ev_idle>, start it, and in the
callback, free it. Alos, use no error checking, as usual.

  static void
  idle_cb (struct ev_loop *loop, struct ev_idle *w, int revents)
  {
    free (w);
    // now do something you wanted to do when the program has
    // no longer asnything immediate to do.
  }

  struct ev_idle *idle_watcher = malloc (sizeof (struct ev_idle));
  ev_idle_init (idle_watcher, idle_cb);
  ev_idle_start (loop, idle_cb);


=head2 C<ev_prepare> and C<ev_check> - customise your event loop

Prepare and check watchers are usually (but not always) used in tandem:
prepare watchers get invoked before the process blocks and check watchers
afterwards.

Their main purpose is to integrate other event mechanisms into libev and
their use is somewhat advanced. This could be used, for example, to track
variable changes, implement your own watchers, integrate net-snmp or a
coroutine library and lots more.

This is done by examining in each prepare call which file descriptors need
to be watched by the other library, registering C<ev_io> watchers for
them and starting an C<ev_timer> watcher for any timeouts (many libraries
provide just this functionality). Then, in the check watcher you check for
any events that occured (by checking the pending status of all watchers
and stopping them) and call back into the library. The I/O and timer
callbacks will never actually be called (but must be valid nevertheless,
because you never know, you know?).

As another example, the Perl Coro module uses these hooks to integrate
coroutines into libev programs, by yielding to other active coroutines
during each prepare and only letting the process block if no coroutines
are ready to run (it's actually more complicated: it only runs coroutines
with priority higher than or equal to the event loop and one coroutine
of lower priority, but only once, using idle watchers to keep the event
loop from blocking if lower-priority coroutines are active, thus mapping
low-priority coroutines to idle/background tasks).

=over 4

=item ev_prepare_init (ev_prepare *, callback)

=item ev_check_init (ev_check *, callback)

Initialises and configures the prepare or check watcher - they have no
parameters of any kind. There are C<ev_prepare_set> and C<ev_check_set>
macros, but using them is utterly, utterly and completely pointless.

=back

Example: *TODO*.


=head2 C<ev_embed> - when one backend isn't enough

This is a rather advanced watcher type that lets you embed one event loop
into another (currently only C<ev_io> events are supported in the embedded
loop, other types of watchers might be handled in a delayed or incorrect
fashion and must not be used).

There are primarily two reasons you would want that: work around bugs and
prioritise I/O.

As an example for a bug workaround, the kqueue backend might only support
sockets on some platform, so it is unusable as generic backend, but you
still want to make use of it because you have many sockets and it scales
so nicely. In this case, you would create a kqueue-based loop and embed it
into your default loop (which might use e.g. poll). Overall operation will
be a bit slower because first libev has to poll and then call kevent, but
at least you can use both at what they are best.

As for prioritising I/O: rarely you have the case where some fds have
to be watched and handled very quickly (with low latency), and even
priorities and idle watchers might have too much overhead. In this case
you would put all the high priority stuff in one loop and all the rest in
a second one, and embed the second one in the first.

As long as the watcher is active, the callback will be invoked every time
there might be events pending in the embedded loop. The callback must then
call C<ev_embed_sweep (mainloop, watcher)> to make a single sweep and invoke
their callbacks (you could also start an idle watcher to give the embedded
loop strictly lower priority for example). You can also set the callback
to C<0>, in which case the embed watcher will automatically execute the
embedded loop sweep.

As long as the watcher is started it will automatically handle events. The
callback will be invoked whenever some events have been handled. You can
set the callback to C<0> to avoid having to specify one if you are not
interested in that.

Also, there have not currently been made special provisions for forking:
when you fork, you not only have to call C<ev_loop_fork> on both loops,
but you will also have to stop and restart any C<ev_embed> watchers
yourself.

Unfortunately, not all backends are embeddable, only the ones returned by
C<ev_embeddable_backends> are, which, unfortunately, does not include any
portable one.

So when you want to use this feature you will always have to be prepared
that you cannot get an embeddable loop. The recommended way to get around
this is to have a separate variables for your embeddable loop, try to
create it, and if that fails, use the normal loop for everything:

  struct ev_loop *loop_hi = ev_default_init (0);
  struct ev_loop *loop_lo = 0;
  struct ev_embed embed;
  
  // see if there is a chance of getting one that works
  // (remember that a flags value of 0 means autodetection)
  loop_lo = ev_embeddable_backends () & ev_recommended_backends ()
    ? ev_loop_new (ev_embeddable_backends () & ev_recommended_backends ())
    : 0;

  // if we got one, then embed it, otherwise default to loop_hi
  if (loop_lo)
    {
      ev_embed_init (&embed, 0, loop_lo);
      ev_embed_start (loop_hi, &embed);
    }
  else
    loop_lo = loop_hi;

=over 4

=item ev_embed_init (ev_embed *, callback, struct ev_loop *embedded_loop)

=item ev_embed_set (ev_embed *, callback, struct ev_loop *embedded_loop)

Configures the watcher to embed the given loop, which must be
embeddable. If the callback is C<0>, then C<ev_embed_sweep> will be
invoked automatically, otherwise it is the responsibility of the callback
to invoke it (it will continue to be called until the sweep has been done,
if you do not want thta, you need to temporarily stop the embed watcher).

=item ev_embed_sweep (loop, ev_embed *)

Make a single, non-blocking sweep over the embedded loop. This works
similarly to C<ev_loop (embedded_loop, EVLOOP_NONBLOCK)>, but in the most
apropriate way for embedded loops.

=back


=head1 OTHER FUNCTIONS

There are some other functions of possible interest. Described. Here. Now.

=over 4

=item ev_once (loop, int fd, int events, ev_tstamp timeout, callback)

This function combines a simple timer and an I/O watcher, calls your
callback on whichever event happens first and automatically stop both
watchers. This is useful if you want to wait for a single event on an fd
or timeout without having to allocate/configure/start/stop/free one or
more watchers yourself.

If C<fd> is less than 0, then no I/O watcher will be started and events
is being ignored. Otherwise, an C<ev_io> watcher for the given C<fd> and
C<events> set will be craeted and started.

If C<timeout> is less than 0, then no timeout watcher will be
started. Otherwise an C<ev_timer> watcher with after = C<timeout> (and
repeat = 0) will be started. While C<0> is a valid timeout, it is of
dubious value.

The callback has the type C<void (*cb)(int revents, void *arg)> and gets
passed an C<revents> set like normal event callbacks (a combination of
C<EV_ERROR>, C<EV_READ>, C<EV_WRITE> or C<EV_TIMEOUT>) and the C<arg>
value passed to C<ev_once>:

  static void stdin_ready (int revents, void *arg)
  {
    if (revents & EV_TIMEOUT)
      /* doh, nothing entered */;
    else if (revents & EV_READ)
      /* stdin might have data for us, joy! */;
  }

  ev_once (STDIN_FILENO, EV_READ, 10., stdin_ready, 0);

=item ev_feed_event (ev_loop *, watcher *, int revents)

Feeds the given event set into the event loop, as if the specified event
had happened for the specified watcher (which must be a pointer to an
initialised but not necessarily started event watcher).

=item ev_feed_fd_event (ev_loop *, int fd, int revents)

Feed an event on the given fd, as if a file descriptor backend detected
the given events it.

=item ev_feed_signal_event (ev_loop *loop, int signum)

Feed an event as if the given signal occured (C<loop> must be the default
loop!).

=back


=head1 LIBEVENT EMULATION

Libev offers a compatibility emulation layer for libevent. It cannot
emulate the internals of libevent, so here are some usage hints:

=over 4

=item * Use it by including <event.h>, as usual.

=item * The following members are fully supported: ev_base, ev_callback,
ev_arg, ev_fd, ev_res, ev_events.

=item * Avoid using ev_flags and the EVLIST_*-macros, while it is
maintained by libev, it does not work exactly the same way as in libevent (consider
it a private API).

=item * Priorities are not currently supported. Initialising priorities
will fail and all watchers will have the same priority, even though there
is an ev_pri field.

=item * Other members are not supported.

=item * The libev emulation is I<not> ABI compatible to libevent, you need
to use the libev header file and library.

=back

=head1 C++ SUPPORT

Libev comes with some simplistic wrapper classes for C++ that mainly allow
you to use some convinience methods to start/stop watchers and also change
the callback model to a model using method callbacks on objects.

To use it,
   
  #include <ev++.h>

(it is not installed by default). This automatically includes F<ev.h>
and puts all of its definitions (many of them macros) into the global
namespace. All C++ specific things are put into the C<ev> namespace.

It should support all the same embedding options as F<ev.h>, most notably
C<EV_MULTIPLICITY>.

Here is a list of things available in the C<ev> namespace:

=over 4

=item C<ev::READ>, C<ev::WRITE> etc.

These are just enum values with the same values as the C<EV_READ> etc.
macros from F<ev.h>.

=item C<ev::tstamp>, C<ev::now>

Aliases to the same types/functions as with the C<ev_> prefix.

=item C<ev::io>, C<ev::timer>, C<ev::periodic>, C<ev::idle>, C<ev::sig> etc.

For each C<ev_TYPE> watcher in F<ev.h> there is a corresponding class of
the same name in the C<ev> namespace, with the exception of C<ev_signal>
which is called C<ev::sig> to avoid clashes with the C<signal> macro
defines by many implementations.

All of those classes have these methods:

=over 4

=item ev::TYPE::TYPE (object *, object::method *)

=item ev::TYPE::TYPE (object *, object::method *, struct ev_loop *)

=item ev::TYPE::~TYPE

The constructor takes a pointer to an object and a method pointer to
the event handler callback to call in this class. The constructor calls
C<ev_init> for you, which means you have to call the C<set> method
before starting it. If you do not specify a loop then the constructor
automatically associates the default loop with this watcher.

The destructor automatically stops the watcher if it is active.

=item w->set (struct ev_loop *)

Associates a different C<struct ev_loop> with this watcher. You can only
do this when the watcher is inactive (and not pending either).

=item w->set ([args])

Basically the same as C<ev_TYPE_set>, with the same args. Must be
called at least once.  Unlike the C counterpart, an active watcher gets
automatically stopped and restarted.

=item w->start ()

Starts the watcher. Note that there is no C<loop> argument as the
constructor already takes the loop.

=item w->stop ()

Stops the watcher if it is active. Again, no C<loop> argument.

=item w->again ()       C<ev::timer>, C<ev::periodic> only

For C<ev::timer> and C<ev::periodic>, this invokes the corresponding
C<ev_TYPE_again> function.

=item w->sweep ()       C<ev::embed> only

Invokes C<ev_embed_sweep>.

=back

=back

Example: Define a class with an IO and idle watcher, start one of them in
the constructor.

  class myclass
  {
    ev_io   io;   void io_cb   (ev::io   &w, int revents);
    ev_idle idle  void idle_cb (ev::idle &w, int revents);

    myclass ();
  }

  myclass::myclass (int fd)
  : io   (this, &myclass::io_cb),
    idle (this, &myclass::idle_cb)
  {
    io.start (fd, ev::READ);
  }

=head1 EMBEDDING

Libev can (and often is) directly embedded into host
applications. Examples of applications that embed it include the Deliantra
Game Server, the EV perl module, the GNU Virtual Private Ethernet (gvpe)
and rxvt-unicode.

The goal is to enable you to just copy the neecssary files into your
source directory without having to change even a single line in them, so
you can easily upgrade by simply copying (or having a checked-out copy of
libev somewhere in your source tree).

=head2 FILESETS

Depending on what features you need you need to include one or more sets of files
in your app.

=head3 CORE EVENT LOOP

To include only the libev core (all the C<ev_*> functions), with manual
configuration (no autoconf):

  #define EV_STANDALONE 1
  #include "ev.c"

This will automatically include F<ev.h>, too, and should be done in a
single C source file only to provide the function implementations. To use
it, do the same for F<ev.h> in all files wishing to use this API (best
done by writing a wrapper around F<ev.h> that you can include instead and
where you can put other configuration options):

  #define EV_STANDALONE 1
  #include "ev.h"

Both header files and implementation files can be compiled with a C++
compiler (at least, thats a stated goal, and breakage will be treated
as a bug).

You need the following files in your source tree, or in a directory
in your include path (e.g. in libev/ when using -Ilibev):

  ev.h
  ev.c
  ev_vars.h
  ev_wrap.h

  ev_win32.c      required on win32 platforms only

  ev_select.c     only when select backend is enabled (which is is by default)
  ev_poll.c       only when poll backend is enabled (disabled by default)
  ev_epoll.c      only when the epoll backend is enabled (disabled by default)
  ev_kqueue.c     only when the kqueue backend is enabled (disabled by default)
  ev_port.c       only when the solaris port backend is enabled (disabled by default)

F<ev.c> includes the backend files directly when enabled, so you only need
to compile a single file.

=head3 LIBEVENT COMPATIBILITY API

To include the libevent compatibility API, also include:

  #include "event.c"

in the file including F<ev.c>, and:

  #include "event.h"

in the files that want to use the libevent API. This also includes F<ev.h>.

You need the following additional files for this:

  event.h
  event.c

=head3 AUTOCONF SUPPORT

Instead of using C<EV_STANDALONE=1> and providing your config in
whatever way you want, you can also C<m4_include([libev.m4])> in your
F<configure.ac> and leave C<EV_STANDALONE> off. F<ev.c> will then include
F<config.h> and configure itself accordingly.

For this of course you need the m4 file:

  libev.m4

=head2 PREPROCESSOR SYMBOLS/MACROS

Libev can be configured via a variety of preprocessor symbols you have to define
before including any of its files. The default is not to build for multiplicity
and only include the select backend.

=over 4

=item EV_STANDALONE

Must always be C<1> if you do not use autoconf configuration, which
keeps libev from including F<config.h>, and it also defines dummy
implementations for some libevent functions (such as logging, which is not
supported). It will also not define any of the structs usually found in
F<event.h> that are not directly supported by the libev core alone.

=item EV_USE_MONOTONIC

If defined to be C<1>, libev will try to detect the availability of the
monotonic clock option at both compiletime and runtime. Otherwise no use
of the monotonic clock option will be attempted. If you enable this, you
usually have to link against librt or something similar. Enabling it when
the functionality isn't available is safe, though, althoguh you have
to make sure you link against any libraries where the C<clock_gettime>
function is hiding in (often F<-lrt>).

=item EV_USE_REALTIME

If defined to be C<1>, libev will try to detect the availability of the
realtime clock option at compiletime (and assume its availability at
runtime if successful). Otherwise no use of the realtime clock option will
be attempted. This effectively replaces C<gettimeofday> by C<clock_get
(CLOCK_REALTIME, ...)> and will not normally affect correctness. See tzhe note about libraries
in the description of C<EV_USE_MONOTONIC>, though.

=item EV_USE_SELECT

If undefined or defined to be C<1>, libev will compile in support for the
C<select>(2) backend. No attempt at autodetection will be done: if no
other method takes over, select will be it. Otherwise the select backend
will not be compiled in.

=item EV_SELECT_USE_FD_SET

If defined to C<1>, then the select backend will use the system C<fd_set>
structure. This is useful if libev doesn't compile due to a missing
C<NFDBITS> or C<fd_mask> definition or it misguesses the bitset layout on
exotic systems. This usually limits the range of file descriptors to some
low limit such as 1024 or might have other limitations (winsocket only
allows 64 sockets). The C<FD_SETSIZE> macro, set before compilation, might
influence the size of the C<fd_set> used.

=item EV_SELECT_IS_WINSOCKET

When defined to C<1>, the select backend will assume that
select/socket/connect etc. don't understand file descriptors but
wants osf handles on win32 (this is the case when the select to
be used is the winsock select). This means that it will call
C<_get_osfhandle> on the fd to convert it to an OS handle. Otherwise,
it is assumed that all these functions actually work on fds, even
on win32. Should not be defined on non-win32 platforms.

=item EV_USE_POLL

If defined to be C<1>, libev will compile in support for the C<poll>(2)
backend. Otherwise it will be enabled on non-win32 platforms. It
takes precedence over select.

=item EV_USE_EPOLL

If defined to be C<1>, libev will compile in support for the Linux
C<epoll>(7) backend. Its availability will be detected at runtime,
otherwise another method will be used as fallback. This is the
preferred backend for GNU/Linux systems.

=item EV_USE_KQUEUE

If defined to be C<1>, libev will compile in support for the BSD style
C<kqueue>(2) backend. Its actual availability will be detected at runtime,
otherwise another method will be used as fallback. This is the preferred
backend for BSD and BSD-like systems, although on most BSDs kqueue only
supports some types of fds correctly (the only platform we found that
supports ptys for example was NetBSD), so kqueue might be compiled in, but
not be used unless explicitly requested. The best way to use it is to find
out wether kqueue supports your type of fd properly and use an embedded
kqueue loop.

=item EV_USE_PORT

If defined to be C<1>, libev will compile in support for the Solaris
10 port style backend. Its availability will be detected at runtime,
otherwise another method will be used as fallback. This is the preferred
backend for Solaris 10 systems.

=item EV_USE_DEVPOLL

reserved for future expansion, works like the USE symbols above.

=item EV_H

The name of the F<ev.h> header file used to include it. The default if
undefined is C<< <ev.h> >> in F<event.h> and C<"ev.h"> in F<ev.c>. This
can be used to virtually rename the F<ev.h> header file in case of conflicts.

=item EV_CONFIG_H

If C<EV_STANDALONE> isn't C<1>, this variable can be used to override
F<ev.c>'s idea of where to find the F<config.h> file, similarly to
C<EV_H>, above.

=item EV_EVENT_H

Similarly to C<EV_H>, this macro can be used to override F<event.c>'s idea
of how the F<event.h> header can be found.

=item EV_PROTOTYPES

If defined to be C<0>, then F<ev.h> will not define any function
prototypes, but still define all the structs and other symbols. This is
occasionally useful if you want to provide your own wrapper functions
around libev functions.

=item EV_MULTIPLICITY

If undefined or defined to C<1>, then all event-loop-specific functions
will have the C<struct ev_loop *> as first argument, and you can create
additional independent event loops. Otherwise there will be no support
for multiple event loops and there is no first event loop pointer
argument. Instead, all functions act on the single default loop.

=item EV_PERIODICS

If undefined or defined to be C<1>, then periodic timers are supported,
otherwise not. This saves a few kb of code.

=item EV_COMMON

By default, all watchers have a C<void *data> member. By redefining
this macro to a something else you can include more and other types of
members. You have to define it each time you include one of the files,
though, and it must be identical each time.

For example, the perl EV module uses something like this:

  #define EV_COMMON                       \
    SV *self; /* contains this struct */  \
    SV *cb_sv, *fh /* note no trailing ";" */

=item EV_CB_DECLARE(type)

=item EV_CB_INVOKE(watcher,revents)

=item ev_set_cb(ev,cb)

Can be used to change the callback member declaration in each watcher,
and the way callbacks are invoked and set. Must expand to a struct member
definition and a statement, respectively. See the F<ev.v> header file for
their default definitions. One possible use for overriding these is to
avoid the ev_loop pointer as first argument in all cases, or to use method
calls instead of plain function calls in C++.

=head2 EXAMPLES

For a real-world example of a program the includes libev
verbatim, you can have a look at the EV perl module
(L<http://software.schmorp.de/pkg/EV.html>). It has the libev files in
the F<libev/> subdirectory and includes them in the F<EV/EVAPI.h> (public
interface) and F<EV.xs> (implementation) files. Only the F<EV.xs> file
will be compiled. It is pretty complex because it provides its own header
file.

The usage in rxvt-unicode is simpler. It has a F<ev_cpp.h> header file
that everybody includes and which overrides some autoconf choices:

   #define EV_USE_POLL 0
   #define EV_MULTIPLICITY 0
   #define EV_PERIODICS 0
   #define EV_CONFIG_H <config.h>

   #include "ev++.h"

And a F<ev_cpp.C> implementation file that contains libev proper and is compiled:

   #include "rxvttoolkit.h"

   /* darwin has problems with its header files in C++, requiring this namespace juggling */
   using namespace ev;

   #include "ev.c"


=head1 AUTHOR

Marc Lehmann <libev@schmorp.de>.

