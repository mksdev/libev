EMBEDDING THE LIBEV CODE INTO YOUR OWN PROGRAMS

    Instead of building the libev library you can also include the code
    as-is into your programs. To update, you only have to copy a few files
    into your source tree.

    This is how it works:

FILESETS

    CORE EVENT LOOP

    To include only the libev core (all the ev_* functions):

        #define EV_STANDALONE   1
        #include "ev.c"

    This will automatically include ev.h, too, and should be done in a
    single C source file only to provide the function implementations. To
    use it, do the same for ev.h in all files wishing to use this API
    (best done by writing a wrapper around ev.h that you can include
    instead and where you can put other configuration options):

        #define EV_STANDALONE   1
        #include "ev.h"

    Both header files and implementation files can be compiled with a C++
    compiler (at least, thats a stated goal, and breakage will be treated
    as a bug).

    You need the following files in your source tree, or in a directory
    in your include path (e.g. in libev/ when using -Ilibev):

        ev.h
        ev.c
        ev_vars.h
        ev_wrap.h
        ev_win32.c

        ev_select.c     only when select backend is enabled (which is is by default)
        ev_poll.c       only when poll backend is enabled (disabled by default)
        ev_epoll.c      only when the epoll backend is enabled (disabled by default)
        ev_kqueue.c     only when the kqueue backend is enabled (disabled by default)

    "ev.c" includes the backend files directly when enabled.

    LIBEVENT COMPATIBILITY API

    To include the libevent compatibility API, also include:

        #include "event.c"

    in the file including "ev.c", and:

        #include "event.h"

    in the files that want to use the libevent API. This also includes "ev.h".

    You need the following additional files for this:

        event.h
        event.c

AUTOCONF SUPPORT

    Instead of using EV_STANDALONE=1 and providing your config in whatever
    way you want, you can also m4_include([ev.m4]) in your configure.ac
    and leave EV_STANDALONE off. ev.c will then include "config.h" and
    configure itself accordingly.

PREPROCESSOR SYMBOLS

    Libev can be configured via a variety of preprocessor symbols you have to define
    before including any of its files. The default is not to build for multiplicity
    and only include the select backend.

    EV_STANDALONE

        Must always be "1", which keeps libev from including config.h or
        other files, and it also defines dummy implementations for some
        libevent functions (such as logging, which is not supported). It
        will also not define any of the structs usually found in "event.h"
        that are not directly supported by libev code alone.

    EV_USE_MONOTONIC

        If undefined or defined to be "1", libev will try to detect the
        availability of the monotonic clock option at both compiletime and
        runtime. Otherwise no use of the monotonic clock option will be
        attempted.

    EV_USE_REALTIME

        If defined to be "1", libev will try to detect the availability
        of the realtime clock option at compiletime (and assume its
        availability at runtime if successful). Otherwise no use of the
        realtime clock option will be attempted. This effectively replaces
        gettimeofday by clock_get (CLOCK_REALTIME, ...) and will not normally
        affect correctness.

    EV_USE_SELECT

       If undefined or defined to be "1", libev will compile in support
       for the select(2) backend. No attempt at autodetection will be
       done: if no other method takes over, select will be it. Otherwise
       the select backend will not be compiled in.

    EV_SELECT_USE_WIN32_HANDLES

       When defined to 1, the select backend will assume that select
       doesn't understand file descriptors but wants osf handles on
       win32 (this is the case when the select to be used is the winsock
       select). This means that it will call _get_osfhandle on the fd to
       convert it to an OS handle. Should not be defined on non-win32
       platforms.

    EV_USE_POLL

       If defined to be "1", libev will compile in support for the poll(2)
       backend. No attempt at autodetection will be done. poll usually
       performs worse than select, so its not enabled by default (it is
       also slightly less portable).

    EV_USE_EPOLL

       If defined to be "1", libev will compile in support for the Linux
       epoll backend. Its availability will be detected at runtime,
       otherwise another method will be used as fallback. This is the
       preferred backend for GNU/Linux systems.

    EV_USE_KQUEUE

       If defined to be "1", libev will compile in support for the BSD
       style kqueue backend. Its availability will be detected at runtime,
       otherwise another method will be used as fallback. This is the
       preferred backend for BSD and BSd-like systems. Darwin brokenness
       will be detected at runtime and routed around by disabling this
       backend.

    EV_H

        The name of the ev.h header file used to include it. The default
        if undefined is <ev.h> in event.h and "ev.h" in ev.c. This can
        be used to virtually rename the ev.h header file in case of
        conflicts.

    EV_EVENT_H

        Similarly to EV_H, this macro cna be used to override event.c's idea
        of how the event.h header can be found.

    EV_COMMON
 
       By default, all watchers have a "void *data" member. By redefining
       this macro to a something else you can include more and other types
       of members. You have to define it each time you include one of the
       files, though, and it must be identical each time.

       For example, the perl EV module uses this:

           #define EV_COMMON                       \
             SV *self; /* contains this struct */  \
             SV *cb_sv, *fh /* note no trailing ";" */

    EV_PROTOTYPES

       If defined to be "0", then "ev.h" will not define any function
       prototypes, but still define all the structs and other
       symbols. This is occasionally useful.

    EV_MULTIPLICITY

       If undefined or defined to "1", then all event-loop-specific
       functions will have the "struct ev_loop *" as first argument, and
       you can create additional independent event loops. Otherwise there
       will be no support for multiple event loops and there is no first
       event loop pointer argument. Instead, all functions act on the
       single default loop.

    EV_CB_DECLARE(type)
    EV_CB_INVOKE(watcher,revents)
    ev_set_cb(ev,cb)

       Can be used to change the callback member declaration in each
       watcher, and the way callbacks are invoked and set. Must expand
       to a struct member definition and a statement, respectively. See
       the ev.v header file for their default definitions. One possible
       use for overriding these is to avoid the ev_loop pointer as first
       argument in all cases, or to use method calls instead of plain
       function calls in C++.

EXAMPLES

    For a real-world example of a program the includes libev
    verbatim, you can have a look at the EV perl module
    (http://software.schmorp.de/pkg/EV.html).  It has the libev files in
    the libev/ subdirectory and includes them in the EV/EVAPI.h (public
    interface) and EV.xs (implementation) files. Only the EV.xs file will
    be compiled.

